/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type StepStruct = {
  supplier: string;
  timetracked: BigNumberish;
  transferred: boolean;
  reprocessedCounter: BigNumberish;
};

export type StepStructOutput = [string, BigNumber, boolean, BigNumber] & {
  supplier: string;
  timetracked: BigNumber;
  transferred: boolean;
  reprocessedCounter: BigNumber;
};

export interface SupplyChainTrackingInterface extends utils.Interface {
  functions: {
    "addSupplierInMintAccessList(address)": FunctionFragment;
    "addSupplierInWhiteList(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchInQueue(uint8,uint256)": FunctionFragment;
    "canDecryptSupplierInfo(address)": FunctionFragment;
    "canMint(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getProductsInQueue(uint8)": FunctionFragment;
    "getProductsProcessedBatch(uint256)": FunctionFragment;
    "getProductsProcessedStep(uint256,uint8)": FunctionFragment;
    "getProductsProcessedStepArrayLenght(uint256)": FunctionFragment;
    "getProductsProcessedWhatQueues(uint256)": FunctionFragment;
    "givePullAccessToAddressIntoQueue(address,uint8)": FunctionFragment;
    "givePushAccessToAddressIntoQueue(address,uint8)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isEnd(uint8)": FunctionFragment;
    "isStart(uint8)": FunctionFragment;
    "isSupplierInWhiteList(address)": FunctionFragment;
    "mint(string,uint256)": FunctionFragment;
    "mintingCredit(address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "productIdFromTokenId(uint256)": FunctionFragment;
    "productsProcessed(uint256)": FunctionFragment;
    "pushBatchInQueue(uint8)": FunctionFragment;
    "queuePullAccess(address,uint256)": FunctionFragment;
    "queuePushAccess(address,uint256)": FunctionFragment;
    "removeEnd(uint8)": FunctionFragment;
    "removeStart(uint8)": FunctionFragment;
    "removeSupplierInMintAccessList(address)": FunctionFragment;
    "removeSupplierInWhiteList(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setEnd(uint8)": FunctionFragment;
    "setStart(uint8)": FunctionFragment;
    "supplierInfo(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenIdFromProductId(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferBatchFromTo(uint8,uint8,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSupplierInMintAccessList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupplierInWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchInQueue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canDecryptSupplierInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "canMint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsInQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsProcessedBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsProcessedStep",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsProcessedStepArrayLenght",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsProcessedWhatQueues",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "givePullAccessToAddressIntoQueue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "givePushAccessToAddressIntoQueue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isEnd", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "isStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupplierInWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingCredit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productIdFromTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productsProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pushBatchInQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuePullAccess",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuePushAccess",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupplierInMintAccessList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupplierInWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplierInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIdFromProductId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBatchFromTo",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupplierInMintAccessList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupplierInWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canDecryptSupplierInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsProcessedBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsProcessedStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsProcessedStepArrayLenght",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsProcessedWhatQueues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givePullAccessToAddressIntoQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givePushAccessToAddressIntoQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupplierInWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintingCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productIdFromTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushBatchInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuePullAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuePushAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupplierInMintAccessList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupplierInWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplierInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdFromProductId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferBatchFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface SupplyChainTracking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SupplyChainTrackingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSupplierInMintAccessList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupplierInWhiteList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchInQueue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canDecryptSupplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canMint(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProductsInQueue(
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getProductsProcessedBatch(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProductsProcessedStep(
      _id: BigNumberish,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[StepStructOutput]>;

    getProductsProcessedStepArrayLenght(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProductsProcessedWhatQueues(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    givePullAccessToAddressIntoQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    givePushAccessToAddressIntoQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isEnd(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    isStart(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    isSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      tokenURI: string,
      _productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintingCredit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    productIdFromTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    productsProcessed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        batch: string;
        howmanysteps: BigNumber;
      }
    >;

    pushBatchInQueue(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queuePullAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    queuePushAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    removeEnd(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeStart(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupplierInMintAccessList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupplierInWhiteList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnd(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStart(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        ragsoc: string;
        piva: string;
        location: string;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenIdFromProductId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferBatchFromTo(
      _queueIdA: BigNumberish,
      _queueIdB: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSupplierInMintAccessList(
    _supplier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupplierInWhiteList(
    _supplier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  batchInQueue(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canDecryptSupplierInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canMint(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProductsInQueue(
    _queueId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getProductsProcessedBatch(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProductsProcessedStep(
    _id: BigNumberish,
    _queueId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StepStructOutput>;

  getProductsProcessedStepArrayLenght(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProductsProcessedWhatQueues(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number[]>;

  givePullAccessToAddressIntoQueue(
    _supplier: string,
    _queueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  givePushAccessToAddressIntoQueue(
    _supplier: string,
    _queueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEnd(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isStart(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isSupplierInWhiteList(
    _supplier: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    tokenURI: string,
    _productId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintingCredit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  productIdFromTokenId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  productsProcessed(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      id: BigNumber;
      batch: string;
      howmanysteps: BigNumber;
    }
  >;

  pushBatchInQueue(
    _queueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queuePullAccess(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  queuePushAccess(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  removeEnd(
    _queueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeStart(
    _queueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupplierInMintAccessList(
    _supplier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupplierInWhiteList(
    _supplier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnd(
    _queueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStart(
    _queueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplierInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      ragsoc: string;
      piva: string;
      location: string;
    }
  >;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenIdFromProductId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferBatchFromTo(
    _queueIdA: BigNumberish,
    _queueIdB: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSupplierInMintAccessList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchInQueue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canDecryptSupplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canMint(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProductsInQueue(
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getProductsProcessedBatch(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProductsProcessedStep(
      _id: BigNumberish,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StepStructOutput>;

    getProductsProcessedStepArrayLenght(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductsProcessedWhatQueues(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number[]>;

    givePullAccessToAddressIntoQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    givePushAccessToAddressIntoQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEnd(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isStart(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      tokenURI: string,
      _productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintingCredit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    productIdFromTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    productsProcessed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        batch: string;
        howmanysteps: BigNumber;
      }
    >;

    pushBatchInQueue(
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    queuePullAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    queuePushAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    removeEnd(_queueId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removeStart(
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupplierInMintAccessList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnd(_queueId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setStart(_queueId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    supplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        ragsoc: string;
        piva: string;
        location: string;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenIdFromProductId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferBatchFromTo(
      _queueIdA: BigNumberish,
      _queueIdB: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    addSupplierInMintAccessList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupplierInWhiteList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchInQueue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canDecryptSupplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductsInQueue(
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductsProcessedBatch(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductsProcessedStep(
      _id: BigNumberish,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductsProcessedStepArrayLenght(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductsProcessedWhatQueues(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    givePullAccessToAddressIntoQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    givePushAccessToAddressIntoQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEnd(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isStart(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      tokenURI: string,
      _productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintingCredit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    productIdFromTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    productsProcessed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pushBatchInQueue(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queuePullAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queuePushAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeEnd(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeStart(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupplierInMintAccessList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupplierInWhiteList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnd(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStart(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplierInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdFromProductId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferBatchFromTo(
      _queueIdA: BigNumberish,
      _queueIdB: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupplierInMintAccessList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupplierInWhiteList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchInQueue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canDecryptSupplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canMint(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductsInQueue(
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductsProcessedBatch(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductsProcessedStep(
      _id: BigNumberish,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductsProcessedStepArrayLenght(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductsProcessedWhatQueues(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    givePullAccessToAddressIntoQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    givePushAccessToAddressIntoQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEnd(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStart(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      tokenURI: string,
      _productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintingCredit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    productIdFromTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    productsProcessed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pushBatchInQueue(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queuePullAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuePushAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeEnd(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeStart(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupplierInMintAccessList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupplierInWhiteList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnd(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStart(
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdFromProductId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferBatchFromTo(
      _queueIdA: BigNumberish,
      _queueIdB: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
