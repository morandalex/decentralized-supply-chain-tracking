/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Test, TestInterface } from "../Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_patient",
        type: "address",
      },
      {
        internalType: "address",
        name: "_doctor",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_documentType",
        type: "uint256",
      },
    ],
    name: "checkAccess",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getConcat",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061040c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631bbfbb571461003b57806368b8420114610063575b600080fd5b61004e610049366004610237565b610078565b60405190151581526020015b60405180910390f35b61006b6100e6565b60405161005a91906102a9565b600073cebcb8051519489cdc4e1e46dc5a8adea772fc496001600160a01b0385161480156100c2575073ac7ae76728931da8e35a365b02a88e050e52103d6001600160a01b038416145b80156100ce5750816001145b156100db575060016100df565b5060005b9392505050565b60606100f142610115565b6040516020016101019190610273565b604051602081830303815290604052905090565b6060816101395750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610163578061014d8161034f565b915061015c9050600a836102f4565b915061013d565b60008167ffffffffffffffff81111561017e5761017e6103c0565b6040519080825280601f01601f1916602001820160405280156101a8576020820181803683370190505b5090505b8415610213576101bd600183610308565b91506101ca600a8661036a565b6101d59060306102dc565b60f81b8183815181106101ea576101ea6103aa565b60200101906001600160f81b031916908160001a90535061020c600a866102f4565b94506101ac565b949350505050565b80356001600160a01b038116811461023257600080fd5b919050565b60008060006060848603121561024c57600080fd5b6102558461021b565b92506102636020850161021b565b9150604084013590509250925092565b636369616f60e01b8152601f60fa1b60048201526000825161029c81600585016020870161031f565b9190910160050192915050565b60208152600082518060208401526102c881604085016020870161031f565b601f01601f19169190910160400192915050565b600082198211156102ef576102ef61037e565b500190565b60008261030357610303610394565b500490565b60008282101561031a5761031a61037e565b500390565b60005b8381101561033a578181015183820152602001610322565b83811115610349576000848401525b50505050565b60006000198214156103635761036361037e565b5060010190565b60008261037957610379610394565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207cc19f46a34ea6ce7e8009ce43876be2e886a1f10fe58ba98d576cabf2c0743d64736f6c63430008060033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Test {
    return super.attach(address) as Test;
  }
  connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
