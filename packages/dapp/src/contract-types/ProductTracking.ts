/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type StepStruct = {
  supplier: string;
  timetracked: BigNumberish;
  transferred: boolean;
  reprocessedCounter: BigNumberish;
};

export type StepStructOutput = [string, BigNumber, boolean, BigNumber] & {
  supplier: string;
  timetracked: BigNumber;
  transferred: boolean;
  reprocessedCounter: BigNumber;
};

export interface ProductTrackingInterface extends utils.Interface {
  functions: {
    "addSupplierInWhiteList(address)": FunctionFragment;
    "addressPullAccessToQueue(address,uint8)": FunctionFragment;
    "addressPushAccessToQueue(address,uint8)": FunctionFragment;
    "batchInQueue(uint8,uint256)": FunctionFragment;
    "canDecryptSupplierInfo(address)": FunctionFragment;
    "getProductsInQueue(uint8)": FunctionFragment;
    "getProductsProcessedBatch(uint256)": FunctionFragment;
    "getProductsProcessedStep(uint256,uint8)": FunctionFragment;
    "isSupplierInWhiteList(address)": FunctionFragment;
    "productsProcessed(uint256)": FunctionFragment;
    "pushBatchInQueue(uint8,uint256)": FunctionFragment;
    "queuePullAccess(address,uint256)": FunctionFragment;
    "queuePushAccess(address,uint256)": FunctionFragment;
    "supplierInfo(address)": FunctionFragment;
    "transferBatchFromTo(uint8,uint8,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSupplierInWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressPullAccessToQueue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressPushAccessToQueue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchInQueue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canDecryptSupplierInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsInQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsProcessedBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsProcessedStep",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupplierInWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "productsProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pushBatchInQueue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuePullAccess",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuePushAccess",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplierInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBatchFromTo",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupplierInWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressPullAccessToQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressPushAccessToQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canDecryptSupplierInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsProcessedBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsProcessedStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupplierInWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushBatchInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuePullAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuePushAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplierInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBatchFromTo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ProductTracking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProductTrackingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSupplierInWhiteList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressPullAccessToQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressPushAccessToQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchInQueue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canDecryptSupplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getProductsInQueue(
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getProductsProcessedBatch(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProductsProcessedStep(
      _id: BigNumberish,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[StepStructOutput]>;

    isSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    productsProcessed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; batch: string }>;

    pushBatchInQueue(
      _queueId: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queuePullAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    queuePushAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    supplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        ragsoc: string;
        piva: string;
        location: string;
      }
    >;

    transferBatchFromTo(
      _queueIdA: BigNumberish,
      _queueIdB: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSupplierInWhiteList(
    _supplier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressPullAccessToQueue(
    _supplier: string,
    _queueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressPushAccessToQueue(
    _supplier: string,
    _queueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchInQueue(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canDecryptSupplierInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getProductsInQueue(
    _queueId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getProductsProcessedBatch(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProductsProcessedStep(
    _id: BigNumberish,
    _queueId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StepStructOutput>;

  isSupplierInWhiteList(
    _supplier: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  productsProcessed(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { id: BigNumber; batch: string }>;

  pushBatchInQueue(
    _queueId: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queuePullAccess(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  queuePushAccess(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  supplierInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      ragsoc: string;
      piva: string;
      location: string;
    }
  >;

  transferBatchFromTo(
    _queueIdA: BigNumberish,
    _queueIdB: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addressPullAccessToQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addressPushAccessToQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchInQueue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canDecryptSupplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getProductsInQueue(
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getProductsProcessedBatch(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProductsProcessedStep(
      _id: BigNumberish,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StepStructOutput>;

    isSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    productsProcessed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; batch: string }>;

    pushBatchInQueue(
      _queueId: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    queuePullAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    queuePushAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    supplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        ragsoc: string;
        piva: string;
        location: string;
      }
    >;

    transferBatchFromTo(
      _queueIdA: BigNumberish,
      _queueIdB: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addSupplierInWhiteList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressPullAccessToQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressPushAccessToQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchInQueue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canDecryptSupplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductsInQueue(
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductsProcessedBatch(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductsProcessedStep(
      _id: BigNumberish,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    productsProcessed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pushBatchInQueue(
      _queueId: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queuePullAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queuePushAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplierInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferBatchFromTo(
      _queueIdA: BigNumberish,
      _queueIdB: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupplierInWhiteList(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressPullAccessToQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressPushAccessToQueue(
      _supplier: string,
      _queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchInQueue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canDecryptSupplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductsInQueue(
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductsProcessedBatch(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductsProcessedStep(
      _id: BigNumberish,
      _queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupplierInWhiteList(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    productsProcessed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pushBatchInQueue(
      _queueId: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queuePullAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuePushAccess(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supplierInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferBatchFromTo(
      _queueIdA: BigNumberish,
      _queueIdB: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
