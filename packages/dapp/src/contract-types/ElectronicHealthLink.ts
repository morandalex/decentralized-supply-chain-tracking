/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type DocumentStruct = {
  patient: string;
  doctor: string;
  documentType: BigNumberish;
  createdAt: BigNumberish;
  ipfsLink: string;
  encryptedSymmetricKey: string;
};

export type DocumentStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  patient: string;
  doctor: string;
  documentType: BigNumber;
  createdAt: BigNumber;
  ipfsLink: string;
  encryptedSymmetricKey: string;
};

export interface ElectronicHealthLinkInterface extends utils.Interface {
  functions: {
    "checkAccess(address,address,uint256)": FunctionFragment;
    "getDocumentsAll(address)": FunctionFragment;
    "getDocumentsFromGrant(address,address,uint256)": FunctionFragment;
    "grantAccess(address,uint256,uint256,uint256[])": FunctionFragment;
    "pushDocument(address,uint256,string,string,address)": FunctionFragment;
    "revokeAccess(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkAccess",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentsAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentsFromGrant",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [string, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pushDocument",
    values: [string, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentsAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentsFromGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ElectronicHealthLink extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ElectronicHealthLinkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkAccess(
      _patient: string,
      _doctor: string,
      _documentType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getDocumentsAll(
      _patient: string,
      overrides?: CallOverrides
    ): Promise<[DocumentStructOutput[]]>;

    getDocumentsFromGrant(
      _patient: string,
      _doctor: string,
      _docType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DocumentStructOutput[]]>;

    grantAccess(
      _doctor: string,
      _start: BigNumberish,
      _end: BigNumberish,
      _documentTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushDocument(
      _patient: string,
      _documentType: BigNumberish,
      _ipfsLink: string,
      _encryptedSymmetricKey: string,
      _doctor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeAccess(
      _grantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  checkAccess(
    _patient: string,
    _doctor: string,
    _documentType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDocumentsAll(
    _patient: string,
    overrides?: CallOverrides
  ): Promise<DocumentStructOutput[]>;

  getDocumentsFromGrant(
    _patient: string,
    _doctor: string,
    _docType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DocumentStructOutput[]>;

  grantAccess(
    _doctor: string,
    _start: BigNumberish,
    _end: BigNumberish,
    _documentTypes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushDocument(
    _patient: string,
    _documentType: BigNumberish,
    _ipfsLink: string,
    _encryptedSymmetricKey: string,
    _doctor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeAccess(
    _grantAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkAccess(
      _patient: string,
      _doctor: string,
      _documentType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDocumentsAll(
      _patient: string,
      overrides?: CallOverrides
    ): Promise<DocumentStructOutput[]>;

    getDocumentsFromGrant(
      _patient: string,
      _doctor: string,
      _docType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DocumentStructOutput[]>;

    grantAccess(
      _doctor: string,
      _start: BigNumberish,
      _end: BigNumberish,
      _documentTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    pushDocument(
      _patient: string,
      _documentType: BigNumberish,
      _ipfsLink: string,
      _encryptedSymmetricKey: string,
      _doctor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAccess(
      _grantAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    checkAccess(
      _patient: string,
      _doctor: string,
      _documentType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocumentsAll(
      _patient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocumentsFromGrant(
      _patient: string,
      _doctor: string,
      _docType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAccess(
      _doctor: string,
      _start: BigNumberish,
      _end: BigNumberish,
      _documentTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushDocument(
      _patient: string,
      _documentType: BigNumberish,
      _ipfsLink: string,
      _encryptedSymmetricKey: string,
      _doctor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeAccess(
      _grantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkAccess(
      _patient: string,
      _doctor: string,
      _documentType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocumentsAll(
      _patient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocumentsFromGrant(
      _patient: string,
      _doctor: string,
      _docType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAccess(
      _doctor: string,
      _start: BigNumberish,
      _end: BigNumberish,
      _documentTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushDocument(
      _patient: string,
      _documentType: BigNumberish,
      _ipfsLink: string,
      _encryptedSymmetricKey: string,
      _doctor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeAccess(
      _grantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
